generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@index([name])
}

model User {
  id          Int            @id @default(autoincrement())
  usuario    String       @unique
  email       String         @unique
  password    String
  activo                Boolean   @default(true)
  employeeId  Int?         
  roleId      Int?
  employee    Employee?      @relation(fields: [employeeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  role        Role?           @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  notifications Notification[]
  licenseSupervisores LicenseSupervisor[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([email])
  @@index([roleId])
}

model Employee {
  id                    Int       @id @default(autoincrement())
  dni                   String    @unique
  name                  String
  email                 String    @unique
  birthDate             DateTime?
  gender                String
  address               String?
  phone                 String?
  photo                 String? @db.Text
  status                String   @default("Activo")  // Activo, Licencia, etc.
  productivityScore     Int?      // Puntuación de productividad general
  horas                 Float?
  departmentId          Int ?
  department            Department? @relation("DepartmentEmployees", fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  office                Office?   @relation("OfficeEmployees", fields: [officeId], references: [id],  onDelete: NoAction, onUpdate: NoAction)
  officeId              Int?
  // Self-relation: jefe/subordinados
  managerId             Int?
  manager               Employee? @relation("Manages", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subordinates          Employee[] @relation("Manages")
  // Relación de jefatura de departamento (inversa)
  departmentHead        Department? @relation("DepartmentHead")
  // Relación de jefatura de oficina (inversa)
  officeHead            Office? @relation("OfficeHead")
  // Relaciones de horario
  cronograma            Horario? @relation(fields: [cronogramaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  cronogramaId          Int?
  condicionesLaborales  CondicionLaboral?
  messages              Message[]
  permissions           Permission[]
  certifications        Certification[]
  skillStatuses         SkillStatus[]
  complaints            Complaint[]
  tasks                 Task[]
  softSkills            EmployeeSoftSkill[]
  technicalSkills       EmployeeTechnicalSkill[]
  feedbacksGiven        Feedback[] @relation("FeedbackEvaluator")
  feedbacksReceived     Feedback[] @relation("FeedbackEvaluated")
  licenses              License[]
  academicRecords       AcademicRecord[]
  workExperience        WorkExperience[]
  languages             Language[]
  users                 User[]    // Relación inversa con User
  ausencias             Ausencia[]
  aprobaciones          Aprobaciones[] @relation("LicenseApprover")
  resenasDeRendimiento  ResenasDeRendimiento[]
  satisfaccionMetrica   SatisfaccionMetrica?
  criticalEvents        CriticalEvents[]
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([dni])
  @@index([email])
  @@index([status])
  @@index([departmentId])
  @@index([managerId])
  @@index([name])
}

model Department {
  id                     Int        @id @default(autoincrement())
  nombre                 String
  description            String?
  jefeId                 Int?       @unique
  nivelJerarquico        Int?
  habilidades_requeridas String

  jefe                   Employee?   @relation("DepartmentHead", fields: [jefeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  employees              Employee[]  @relation("DepartmentEmployees")
  offices                Office[]
  feedbacks              Feedback[]

  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt

  @@index([nombre])
  @@index([jefeId])
  @@index([nivelJerarquico])
}

model Office {
  id                     Int        @id @default(autoincrement())
  nombre                 String
  description            String?
  departmentId           Int
  jefeId                 Int?       @unique
  habilidades_requeridas String

  department             Department   @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  jefe                   Employee?    @relation("OfficeHead", fields: [jefeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  employees              Employee[]   @relation("OfficeEmployees")
  feedbacks              Feedback[]

  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt

  @@index([nombre])
  @@index([departmentId])
}

model TechnicalSkill {
  id                      Int       @id @default(autoincrement())
  nombre                  String    @unique
  description             String?   @db.Text
  testType                String?   // multiple-choice, case-study, etc.
  profession              String?   // Contador, Abogado, Desarrollador, etc.
  questions               Question[]
  employeeTechnicalSkills EmployeeTechnicalSkill[]
  activo                Boolean   @default(true)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  @@index([nombre])
  @@index([profession])
}

model EmployeeTechnicalSkill {
  id               Int            @id @default(autoincrement())
  employeeId       Int
  technicalSkillId Int
  level            String?        // "Alto", "Medio", "Bajo" o puntuación
  certified        Boolean        @default(false)
  employee         Employee       @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  technicalSkill   TechnicalSkill @relation(fields: [technicalSkillId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@unique([employeeId, technicalSkillId])
  @@index([employeeId])
  @@index([technicalSkillId])
  @@index([level])
  @@index([certified])
}

model SoftSkill {
  id                 Int                 @id @default(autoincrement())
  nombre             String              @unique
  description        String?             @db.Text
  employeeSoftSkills EmployeeSoftSkill[]
  feedbacks          Feedback[]
  activo                Boolean   @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  @@index([nombre])
}

model EmployeeSoftSkill {
  id            Int          @id @default(autoincrement())
  employeeId    Int
  softSkillId   Int
  level         Int?         // puede representar "Alto", "Medio", "Bajo" o un valor numérico
  skillStatusId Int?

  employee      Employee     @relation(fields: [employeeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  softSkill     SoftSkill    @relation(fields: [softSkillId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  skillStatus   SkillStatus? @relation(fields: [skillStatusId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@unique([employeeId, softSkillId])
  @@index([employeeId])
  @@index([softSkillId])
  @@index([level])
}

model Question {
  id                 Int             @id @default(autoincrement())
  text               String          @db.Text
  answers            Answer[] 
  technicalSkillId   Int?
  technicalSkill     TechnicalSkill? @relation(fields: [technicalSkillId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  
}

model Answer {
  id         Int      @id @default(autoincrement())
  text       String   @db.Text
  isCorrect  Boolean  @default(false)
  questionId Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)


  @@index([isCorrect])
}

model Feedback {
  id           Int        @id @default(autoincrement())
  evaluatorId  Int
  evaluatedId  Int?
  officeId     Int?
  departmentId Int
  softSkillId  Int
  respuesta    Respuesta[]
  activo                Boolean   @default(true)
  createdAt    DateTime   @default(now())

  department   Department @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  evaluator    Employee   @relation("FeedbackEvaluator", fields: [evaluatorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  evaluated    Employee?  @relation("FeedbackEvaluated", fields: [evaluatedId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  office       Office?    @relation(fields: [officeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  softSkill    SoftSkill  @relation(fields: [softSkillId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([evaluatorId])
  @@index([evaluatedId])
  @@index([softSkillId])
  @@index([createdAt])
}

model Respuesta {
  id         Int      @id @default(autoincrement())
  feedbackId Int
  malo       Int
  bueno      Int
  excelente  Int
  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([feedbackId])
  @@index([malo])
  @@index([bueno])
  @@index([excelente])
}

model License {
  id                    Int                     @id @default(autoincrement())
  type                  String
  startDate             DateTime
  endDate               DateTime
  status                String
  duracion              Int?
  mensajeOriginal       String                  @db.Text
  employee              Employee                @relation(fields: [employeeId], references: [id],  onDelete: NoAction, onUpdate: NoAction)
  employeeId            Int
  supervisores          LicenseSupervisor[]
  aprobaciones          Aprobaciones[]
  configuracionLicencias ConfiguracionLicencias[]
  consumoLicencias      ConsumoLicencias[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt

  @@index([employeeId])
  @@index([status])
  @@index([type])
  @@index([startDate, endDate])
}

// Tabla intermedia para la relación many-to-many entre License y User
model LicenseSupervisor {
  id          Int      @id @default(autoincrement())
  licenseId   Int
  userId      Int
  license     License  @relation(fields: [licenseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime @default(now())

  @@unique([licenseId, userId])
  @@index([licenseId])
  @@index([userId])
}

// OPTIMIZACIÓN: Configuración anual de licencias disponibles por tipo
model ConfiguracionLicencias {
  id         Int      @id @default(autoincrement())
  anio       Int 
  tipo       String
  categoria  String
  diasTotales Int     // Días totales disponibles por tipo de licencia
  licenseId  Int
  license    License  @relation(fields: [licenseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([licenseId, anio, tipo])
  @@index([anio])
  @@index([categoria])
  @@index([tipo])
}

// OPTIMIZACIÓN: Registro de consumo de licencias
model ConsumoLicencias {
  id              Int      @id @default(autoincrement())
  anio            Int 
  tipo            String
  diasConsumidos  Int      // Días consumidos de este tipo de licencia
  licenseId       Int
  license         License  @relation(fields: [licenseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fechaConsumo    DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([licenseId])
  @@index([anio])
  @@index([tipo])
  @@index([fechaConsumo])
}

model Aprobaciones {
  id           Int       @id @default(autoincrement())
  licenseId    Int
  license      License   @relation(fields: [licenseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  supervisorId Int
  supervisor   Employee? @relation("LicenseApprover", fields: [supervisorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  fecha        DateTime  @default(now())
  accion       String
  observacion  String?
  updatedAt    DateTime  @updatedAt

  @@index([licenseId])
  @@index([supervisorId])
  @@index([fecha])
}

model Ausencia {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeId Int
  fecha      DateTime
  reason     String   @db.Text
  createdAt  DateTime @default(now())

  @@index([employeeId])
  @@index([fecha])
}

model Notification {
  id        Int      @id @default(autoincrement())
  text      String
  status    String   // license_approval, system_alert, etc.
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([status])
  @@index([isRead])
  @@index([createdAt])
}

model AcademicRecord {
  id          Int       @id @default(autoincrement())
  profession  String?
  title       String
  institution String
  level       String    // Universitario, Secundario
  status      String    // Completo, En curso
  startDate   DateTime
  endDate     DateTime?
  isCurrent   Boolean   @default(false)
  activo                Boolean   @default(true)
  attachment  String?   @db.Text
  employee    Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeId  Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([employeeId])
  @@index([profession])
  @@index([level])
  @@index([status])
  @@index([institution])
}

model Language {
  id            Int      @id @default(autoincrement())
  language      String
  level         String
  certification String?  @db.Text
  employee      Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeId    Int
  attachment    String?  @db.Text
  activo                Boolean   @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([employeeId])
  @@index([language])
  @@index([level])
}

model WorkExperience {
  id           Int       @id @default(autoincrement())
  position     String
  company      String
  industry     String?
  location     String?
  startDate    DateTime
  endDate      DateTime?
  isCurrent    Boolean   @default(false)
  contractType String?
  employee     Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeId   Int
  activo                Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([employeeId])
  @@index([company])
  @@index([position])
  @@index([industry])
  @@index([startDate])
}

model Message {
  id         Int       @id @default(autoincrement())
  employee   Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeId Int
  text       String
  days       Int?
  startDate  DateTime?
  endDate    DateTime?
  status     String    // active/inactive
  createdAt  DateTime  @default(now())

  @@index([employeeId])
  @@index([status])
}

model Permission {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeId Int
  date       DateTime
  exitTime   String
  returnTime String
  hours      Float

  @@index([employeeId])
  @@index([date])
}

model Certification {
  id          Int       @id @default(autoincrement())
  employee    Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeId  Int
  name        String
  institution String
  issueDate   DateTime
  validUntil  DateTime?
  attachment  String?
  activo                Boolean   @default(true)
  createdAt   DateTime  @default(now())

  @@index([employeeId])
  @@index([name])
  @@index([issueDate])
}

model SkillStatus {
  id                 Int                 @id @default(autoincrement())
  employee           Employee            @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeId         Int
  skillId            Int
  status             String              // locked/unlocked
  employeeSoftSkills EmployeeSoftSkill[]
  unlockDate         DateTime?

  @@index([employeeId])
  @@index([skillId])
  @@index([status])
}

model Complaint {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeId Int
  reason     String
  status     String   
  createdAt  DateTime @default(now())

  @@index([employeeId])
  @@index([status])
  @@index([createdAt])
}

model Task {
  id           Int      @id @default(autoincrement())
  employee     Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeId   Int
  name         String
  productivity Float

  @@index([employeeId])
  @@index([name])
}

model CondicionLaboral {
  id           Int       @id @default(autoincrement())
  tipoContrato String
  fechaIngreso DateTime
  fechaPlanta  DateTime?
  categoria    String
  position     String
  employeeId   Int       @unique
  employee     Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([employeeId])
}

model Horario {
  id           Int        @id @default(autoincrement())
  horaInicio   Int
  horaFin      Int
  horasTrabajo Int
  employees    Employee[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model ResenasDeRendimiento {
  id           Int      @id @default(autoincrement())
  employee     Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeId   Int
  period       String
  score        Float
  fortaleza    String?   
  areademejora String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([employeeId])
  @@index([period])
  @@index([createdAt])
}

model SatisfaccionMetrica {
  id                              Int      @id @default(autoincrement())
  employee                        Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeId                      Int      @unique
  SatisfacciónGeneral             Int
  SatisfacciónLaboral             Int
  SatisfacciónEquipo              Int
  SatisfacciónLiderazgo           Int
  SatisfacciónCrecimientoCarrera  Int
  FechaÚltimaEncuesta             DateTime
  createdAt                       DateTime @default(now())
  updatedAt                       DateTime @updatedAt

  @@index([employeeId])
  @@index([FechaÚltimaEncuesta])
}

model CriticalEvents {
  id          Int      @id @default(autoincrement())
  employeeId  Int
  type        String
  description String   @db.Text
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([employeeId])
  @@index([type])
  @@index([createdAt])
}