generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@index([name])
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  password    String
  employeeId  Int?      @unique
  roleId      Int
  employee    Employee? @relation(fields: [employeeId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  role        Role      @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  licenciasSupervisadas License[] @relation("LicenseSupervisores")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([email])
  @@index([employeeId])
  @@index([roleId])
}

model Employee {
  id              Int       @id @default(autoincrement())
  dni             String    @unique
  name            String
  email           String    @unique
  birthDate       String?
  gender          String
  address         String?
  phone           String?
  photo           String?
  status          String    // Activo, Licencia, etc.
  productivityScore Int?  // Puntuación de productividad general
  horas             Float
  activo            Boolean  @default(true)
  departmentId      Int
  department      Department @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  office          Office?    @relation(fields: [officeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  officeId        Int?
  // Self-relation: jefe/subordinados
  managerId       Int?
  manager         Employee? @relation("Manages", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subordinates    Employee[] @relation("Manages")
  // Relaciones
  cronograma      Horario?
  condicionesLaborales CondicionLaboral
  messages       Message[]
  permissions    Permission[]
  certifications Certification[]
  skillStatuses  SkillStatus[]
  complaints     Complaint[]
  tasks          Task[]
  softSkills      EmployeeSoftSkill[]
  technicalSkills EmployeeTechnicalSkill[]
  feedbacks   Feedback[]
  licenses        License[]
  academicRecords AcademicRecord[]
  workExperience  WorkExperience[]
  languages       Language[]
  user            User?     // Relación inversa con User
  Ausencia        Ausencia[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([dni])
  @@index([email])
  @@index([status])
  @@index([departmentId])
  @@index([managerId])
  @@index([ name])
}

model Department {
  id             Int          @id @default(autoincrement())
  nombre           String
  description    String?
  jefeId       Int?        @unique
  jefe         Employee?   @relation("DepartmentHead", fields: [jefeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  nivelJerarquico Int?
  habilidades_requeridas String       // Cambiado a String para SQL Server 2012
  employees      Employee[]
  offices        Office[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([nombre])
  @@index([jefeId ])
  @@index([nivelJerarquico])
}

model Office {
  id             Int          @id @default(autoincrement())
  nombre         String
  description    String?
  department     Department   @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  departmentId   Int
  jefeId        Int? @unique
  jefe         Employee? @relation("OfficeHead", fields: [jefeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // Relación 1:N: muchos empleados pertenecen a una oficina
  employees      Employee[]   @relation("OfficeEmployees")
 habilidades_requeridas String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([nombre])
  @@index([departmentId])
  @@index([jefeId ])
}

model TechnicalSkill {
  id          Int       @id @default(autoincrement())
  nombre      String    @unique
  description String?    @db.Text
  testType    String?   // multiple-choice, case-study, etc.
  profession  String?   // Contador, Abogado, Desarrollador, etc.
  questions  Question[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([nombre])
  @@index([profession])
}

model EmployeeTechnicalSkill {
  id               Int       @id @default(autoincrement())
  employeeId       Int
  technicalSkillId Int
  level            String?   // "Alto", "Medio", "Bajo" o puntuación
  certified         Boolean   @default(false)
  employee         Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  technicalSkill   TechnicalSkill @relation(fields: [technicalSkillId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@unique([employeeId, technicalSkillId])
  @@index([employeeId])
  @@index([technicalSkillId])
  @@index([level])
  @@index([certified])
}

model SoftSkill {
  id          Int       @id @default(autoincrement())
  nombre       String    @unique
  description String?    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  @@index([nombre])
}

model EmployeeSoftSkill {
  id          Int      @id @default(autoincrement())
  employeeId  Int
  softSkillId Int
  level       Int?  // "Alto", "Medio", "Bajo" o puntuación
  SkillStatus SkillStatus? // locked/unlocked
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  softSkill   SoftSkill @relation(fields: [softSkillId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([employeeId, softSkillId])
  @@index([employeeId])
  @@index([softSkillId])
  @@index([level])
}


model Question {
  id       Int   @id @default(autoincrement())
  text     String  @db.Text
  answers  Answer[] 
   @@index([text])
}

model Answer {
  id          Int   @id @default(autoincrement())
  text        String @db.Text
  isCorrect   Boolean  @default(false)
  questionId  Int
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([text])
  @@index([isCorrect])
}

model Feedback {
  id          Int       @id @default(autoincrement())
  evaluatorId    Int         // quién evalúa
  evaluatedId    Int?        // empleado evaluado (puede ser nulo si evalúa oficina)
  officeId       Int?        // oficina evaluada (si aplica)
  departmentId   Int
  softSkillId    Int         // habilidad evaluada
  respuesta      Respuesta[]  // respuestas del cuestionario, ejemplo [0,1,0]
  createdAt      DateTime    @default(now())

  department     Department @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  evaluator      Employee    @relation("FeedbackEvaluator", fields: [evaluatorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  evaluated      Employee?   @relation("FeedbackEvaluated", fields: [evaluatedId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  office         Office?     @relation(fields: [officeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  softSkill      SoftSkill   @relation(fields: [softSkillId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([evaluatorId])
  @@index([evaluatedId])
  @@index([officeId])
  @@index([softSkillId])
  @@index([createdAt])
}

model Respuesta {
  id         Int      @id @default(autoincrement())
  feedbackId Int
  malo      Int
  bueno     Int
  excelente Int
  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)

  @@index([feedbackId])
  @@index([malo])
  @@index([bueno])
  @@index([excelente])
}


model License {
  id           Int       @id @default(autoincrement())
  type         String
  startDate    DateTime
  endDate      DateTime
  status       String
  duracion     Int?
  mensajeOriginal  String   @db.Text
  // Relación directa: mantenemos Cascade (tiene sentido si borrás un empleado y sus licencias también deben borrarse)
  employee     Employee  @relation(fields: [employeeId], references: [id], onDelete:  NoAction, onUpdate: NoAction)
  employeeId   Int
  supervisores     User[]    @relation("LicenseSupervisores")
  aprobaciones Aprobaciones[]
  tiposDeLicencias  TiposLicencia[]
  saldoDeLicencias    SaldoLicencias[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([employeeId])
  @@index([status])
  @@index([type])
  @@index([startDate, endDate])
}


model TiposLicencia {
  anio  Int @id
  tipo String
  cantidad Int
  licenseId Int
  license   License @relation(fields: [licenseId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model SaldoLicencias {
  anio  Int @id
  tipo String
  cantidad Int
  licenseId Int
  license   License @relation(fields: [licenseId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}





model Aprobaciones {
  id           Int       @id @default(autoincrement())
  licenseId    Int
  license      License  @relation(fields: [licenseId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  supervisorId Int
  supervisor   Employee? @relation("Manages", fields: [supervisorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  fecha       DateTime @default(now())
  accion      String
  observacion String?
 updatedAt   DateTime @updatedAt
}
model Ausencia {
  id          Int       @id @default(autoincrement())
  employee    Employee  @relation(fields: [employeeId], references: [id])
  employeeId  Int
  fecha     DateTime
  reason      String @db.Text
  createdAt   DateTime  @default(now())
}
model Notification {
  id        Int      @id @default(autoincrement())
  text      String
  type      String   // license_approval, system_alert, etc.
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
}

model AcademicRecord {
  id          Int      @id @default(autoincrement())
  profession  String?
  title       String
  institution String
  level       String   // Universitario, Secundario
  status      String   // Completo, En curso
  startDate   DateTime
  endDate     DateTime?
  isCurrent   Boolean  @default(false)
  attachment String? @db.Text
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  employeeId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([employeeId])
  @@index([profession])
  @@index([level])
  @@index([status])
  @@index([institution])
}

model Language {
  id           Int      @id @default(autoincrement())
  language     String
  level        String
  certification String? @db.Text
  employee     Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  employeeId   Int
  attachment String? @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([employeeId])
  @@index([language])
  @@index([level])
}

model WorkExperience {
  id           Int       @id @default(autoincrement())
  position     String
  company      String
  industry     String?
  location     String?
  startDate    DateTime
  endDate      DateTime?
  isCurrent    Boolean   @default(false)
  contractType String?
  employee     Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  employeeId   Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([employeeId])
  @@index([company])
  @@index([position])
  @@index([industry])
  @@index([startDate])
}



model Message {
  id          Int       @id @default(autoincrement())
  employee    Employee  @relation(fields: [employeeId], references: [id])
  employeeId  Int
  text        String
  days        Int?
  startDate   DateTime?
  endDate     DateTime?
  status      String    // active/inactive
  createdAt   DateTime  @default(now())
}
model Permission {
  id          Int       @id @default(autoincrement())
  employee    Employee  @relation(fields: [employeeId], references: [id])
  employeeId  Int
  date        DateTime
  exitTime    String
  returnTime  String
  hours       Float
}

model Certification {
  id           Int       @id @default(autoincrement())
  employee     Employee  @relation(fields: [employeeId], references: [id])
  employeeId   Int
  name         String
  institution  String
  issueDate    DateTime
  validUntil   DateTime?
  attachment   String?
  createdAt    DateTime  @default(now())
}

model SkillStatus {
  id         Int       @id @default(autoincrement())
  employee   Employee  @relation(fields: [employeeId], references: [id])
  employeeId Int
  skillId    Int
  status     String    // locked/unlocked
  unlockDate DateTime?
}


model Complaint {
  id          Int       @id @default(autoincrement())
  employee    Employee  @relation(fields: [employeeId], references: [id])
  employeeId  Int
  reason      String
  status      String   
  createdAt   DateTime @default(now())
}

model Task {
  id          Int       @id @default(autoincrement())
  employee    Employee  @relation(fields: [employeeId], references: [id])
  employeeId  Int
  name        String
  productivity Float
}



model CondicionLaboral {
  id                          Int       @id @default(autoincrement())
  tipoContrato                String
  fechaIngreso                DateTime
  fechaPlanta                 DateTime?
  categoria                   String
  ultimaModificacionCategoria DateTime
  position        String
  employeeId Int
  employee   Employee @relation(fields: [employeeId], references: [id])
}

model Horario {
horaInicio Int
horaFin Int
horasTrabajo Int
employees    Employee[]
}